diff --git a/inc/server/Poller.hpp b/inc/server/Poller.hpp
index 7bbf3ce..4f435e1 100644
--- a/inc/server/Poller.hpp
+++ b/inc/server/Poller.hpp
@@ -5,10 +5,11 @@
 #include <stdexcept>
 #include <vector>
 #include <chrono>
+
 class Poller {
 private:
   std::vector<struct pollfd> _poll_fds;
-  static const int _timeout = 1000;
+  static const inline int _timeout = 1000;  // Add 'inline' here
 public:
   void addFd(int fd, short events);
   void removeFd(int fd);
diff --git a/src/server/MultiServerManager.cpp b/src/server/MultiServerManager.cpp
index acff34d..1a3d279 100644
--- a/src/server/MultiServerManager.cpp
+++ b/src/server/MultiServerManager.cpp
@@ -3,6 +3,7 @@
 #include <algorithm>
 #include <stdexcept>
 #include <unordered_set>
+#include <chrono>
 
 extern std::atomic<bool> g_running;
 
@@ -129,18 +130,31 @@ void MultiServerManager::stopAll() {
 
 void MultiServerManager::joinAll() {
     Logger::debug("Joining all server threads...");
+
+    const int timeoutMs = 3000;
+    auto startTime = std::chrono::steady_clock::now();
     
     for (auto& thread : _serverThreads) {
         if (thread.joinable()) {
             try {
+                auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(
+                    std::chrono::steady_clock::now() - startTime).count();
+                if (elapsed >= timeoutMs) {
+                    Logger::warn("Joining server thread timed out, forcefully detaching");
+                    thread.detach();
+                    continue;
+                }
                 thread.join();
                 Logger::debug("Server thread joined successfully");
             } catch (const std::exception& e) {
                 Logger::errorf("Error joining server thread: %s", e.what());
+                if (thread.joinable()) {
+                    thread.detach(); // Detach if join fails
+                    Logger::warn("Forcefully detached server thread due to error");
+                }
             }
         }
     }
-    
     _serverThreads.clear();
     Logger::debug("All server threads joined");
 }
diff --git a/src/server/Poller.cpp b/src/server/Poller.cpp
index 9a2ba64..8bc18f2 100644
--- a/src/server/Poller.cpp
+++ b/src/server/Poller.cpp
@@ -1,6 +1,7 @@
 #include "Poller.hpp"
 #include "utils/Logger.hpp"
 #include <algorithm>
+#include <atomic>
 
 void Poller::addFd(int fd, short events) {
   Logger::debugf("Adding fd %d to poller with events 0x%x", fd, events);
@@ -55,15 +56,23 @@ size_t Poller::getFdCount() const {
 }
 
 std::vector<struct pollfd> Poller::poll() {
+  extern std::atomic<bool> g_running; //
+
   std::vector<struct pollfd> active_fds;
   if (_poll_fds.empty()) {
     Logger::debug("Poll called with no file descriptors");
     return active_fds;
   }
+
+  int effective_timeout = g_running.load() ? _timeout : 100; //
   
   Logger::debugf("Calling poll() on %zu file descriptors with timeout %d ms", _poll_fds.size(), _timeout);
-  int ret = ::poll(_poll_fds.data(), _poll_fds.size(), _timeout);
+  int ret = ::poll(_poll_fds.data(), _poll_fds.size(), effective_timeout);
   
+  if (!g_running.load()) { //
+    Logger::debug("Poll interrupted - server is shutting down");
+    return active_fds;
+  }
   if (ret < 0) {
     if (errno == EINTR) {
       Logger::debug("Poll interrupted by signal");
@@ -97,7 +106,9 @@ std::vector<struct pollfd> Poller::poll() {
   
   return active_fds;
 }
+
 bool Poller::hasActivity(const struct pollfd &pfd, short events) const {
   return (pfd.revents & events) == events;
 }
+
 bool Poller::empty() const { return _poll_fds.empty(); }
